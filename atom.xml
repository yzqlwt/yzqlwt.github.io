<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>玄离的博客</title>
  <icon>https://www.gravatar.com/avatar/9862b0baf5b133e149340606a0ed5e8e</icon>
  <subtitle>胆小认生，不易相处</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.yzqlwt.com/"/>
  <updated>2019-12-16T10:32:03.428Z</updated>
  <id>http://blog.yzqlwt.com/</id>
  
  <author>
    <name>玄离</name>
    <email>yzqlwt@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EventListenerTouchOneByOne的小问题</title>
    <link href="http://blog.yzqlwt.com/archives/503970b4.html"/>
    <id>http://blog.yzqlwt.com/archives/503970b4.html</id>
    <published>2019-12-16T10:15:00.000Z</published>
    <updated>2019-12-16T10:32:03.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EventListenerTouchOneByOne的小问题"><a href="#EventListenerTouchOneByOne的小问题" class="headerlink" title="EventListenerTouchOneByOne的小问题"></a>EventListenerTouchOneByOne的小问题</h1><ul><li>触摸响应区域是整个屏幕</li><li>触摸穿透的设置（SetSwallowTouches）</li><li>对象隐藏事件依旧会响应</li></ul><h2 id="示例代码（lua）"><a href="#示例代码（lua）" class="headerlink" title="示例代码（lua）"></a>示例代码（lua）</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> listener = cc.EventListenerTouchOneByOne:<span class="built_in">create</span>();</span><br><span class="line">    listener:setSwallowTouches(<span class="literal">true</span>)</span><br><span class="line">    listener:registerScriptHandler(<span class="function"><span class="keyword">function</span><span class="params">(touch, event)</span></span></span><br><span class="line">        <span class="keyword">if</span> self:isVisible() <span class="keyword">and</span>      self:isAncestorsVisible(self) <span class="keyword">and</span> cc.rectContainsPoint(self:getBoundingBox(), touch) <span class="keyword">then</span></span><br><span class="line">            doCallback(callback, target)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span>, cc.Handler.EVENT_TOUCH_BEGAN);</span><br><span class="line"><span class="keyword">local</span> eventDispatcher = self:getEventDispatcher(); </span><br><span class="line">eventDispatcher:addEventListenerWithSceneGraphPriority(listener, self);</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node:isAncestorsVisible</span><span class="params">(node)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> node <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    parent = node:getParent()</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">and</span> <span class="keyword">not</span> parent:isVisible() <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> self:isAncestorsVisible(parent)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><ul><li>isAncestorsVisible: 判断子节点在场景中是否可见</li><li>setSwallowTouches的使用看查看<a href="http://blog.yzqlwt.com/archives/25c1596b.html">setSwallowTouches详解</a>，setSwallowTouches设置为true，即事件不向低优先级的listener传递。代码第四行的判断，判断此节点是否可见&amp;&amp;是否在场景中可见&amp;&amp;点击位置是否在节点内部则返回true。如果返回false则setSwallowTouches无效，事件继续传递。</li><li>cc.rectContainsPoint(self:getBoundingBox(), touch)判断点击位置是否在对象内部</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EventListenerTouchOneByOne的小问题&quot;&gt;&lt;a href=&quot;#EventListenerTouchOneByOne的小问题&quot; class=&quot;headerlink&quot; title=&quot;EventListenerTouchOneByOne的小问题&quot;&gt;
      
    
    </summary>
    
    
      <category term="Cocos" scheme="http://blog.yzqlwt.com/tags/Cocos/"/>
    
  </entry>
  
  <entry>
    <title>SetSwallowTouches</title>
    <link href="http://blog.yzqlwt.com/archives/25c1596b.html"/>
    <id>http://blog.yzqlwt.com/archives/25c1596b.html</id>
    <published>2019-12-16T09:12:00.000Z</published>
    <updated>2019-12-16T09:13:04.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cocos-SetSwallowTouches详解"><a href="#Cocos-SetSwallowTouches详解" class="headerlink" title="Cocos SetSwallowTouches详解"></a>Cocos SetSwallowTouches详解</h1><p><strong>当想要停止触摸事件继续向后面的订阅者分发，可以使用SetSwallowTouches(true)来实现。 swallowTouches设置需要在onTouchBegan返回true的时候才有效 </strong></p><h2 id="为什么只有在onTouchBegan返回true的时候才生效"><a href="#为什么只有在onTouchBegan返回true的时候才生效" class="headerlink" title="为什么只有在onTouchBegan返回true的时候才生效"></a>为什么只有在onTouchBegan返回true的时候才生效</h2><p>看一下CCEventDispatcher.cpp中的dispatchTouchEvent函数就明白了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (oneByOneListeners)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> mutableTouchesIter = mutableTouches.<span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">auto</span> touchesIter = originalTouches.<span class="built_in">begin</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (; touchesIter != originalTouches.<span class="built_in">end</span>(); ++touchesIter)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> isSwallowed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> onTouchEvent = [&amp;](EventListener* l) -&gt; <span class="keyword">bool</span> &#123; <span class="comment">// Return true to break</span></span><br><span class="line">                EventListenerTouchOneByOne* listener = <span class="keyword">static_cast</span>&lt;EventListenerTouchOneByOne*&gt;(l);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// Skip if the listener was removed.</span></span><br><span class="line">                <span class="keyword">if</span> (!listener-&gt;_isRegistered)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             </span><br><span class="line">                event-&gt;setCurrentTarget(listener-&gt;_node);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">bool</span> isClaimed = <span class="literal">false</span>;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Touch*&gt;::iterator removedIter;</span><br><span class="line">                </span><br><span class="line">                EventTouch::EventCode eventCode = event-&gt;getEventCode();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (eventCode == EventTouch::EventCode::BEGAN)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (listener-&gt;onTouchBegan)</span><br><span class="line">                    &#123;</span><br><span class="line">                        isClaimed = listener-&gt;onTouchBegan(*touchesIter, event);</span><br><span class="line">                        <span class="keyword">if</span> (isClaimed &amp;&amp; listener-&gt;_isRegistered)</span><br><span class="line">                        &#123;</span><br><span class="line">                            listener-&gt;_claimedTouches.push_back(*touchesIter);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (listener-&gt;_claimedTouches.<span class="built_in">size</span>() &gt; <span class="number">0</span></span><br><span class="line">                         &amp;&amp; ((removedIter = <span class="built_in">std</span>::<span class="built_in">find</span>(listener-&gt;_claimedTouches.<span class="built_in">begin</span>(), listener-&gt;_claimedTouches.<span class="built_in">end</span>(), *touchesIter)) != listener-&gt;_claimedTouches.<span class="built_in">end</span>()))</span><br><span class="line">                &#123;</span><br><span class="line">                    isClaimed = <span class="literal">true</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">switch</span> (eventCode)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> EventTouch::EventCode::MOVED:</span><br><span class="line">                            <span class="keyword">if</span> (listener-&gt;onTouchMoved)</span><br><span class="line">                            &#123;</span><br><span class="line">                                listener-&gt;onTouchMoved(*touchesIter, event);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> EventTouch::EventCode::ENDED:</span><br><span class="line">                            <span class="keyword">if</span> (listener-&gt;onTouchEnded)</span><br><span class="line">                            &#123;</span><br><span class="line">                                listener-&gt;onTouchEnded(*touchesIter, event);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (listener-&gt;_isRegistered)</span><br><span class="line">                            &#123;</span><br><span class="line">                                listener-&gt;_claimedTouches.erase(removedIter);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> EventTouch::EventCode::CANCELLED:</span><br><span class="line">                            <span class="keyword">if</span> (listener-&gt;onTouchCancelled)</span><br><span class="line">                            &#123;</span><br><span class="line">                                listener-&gt;onTouchCancelled(*touchesIter, event);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (listener-&gt;_isRegistered)</span><br><span class="line">                            &#123;</span><br><span class="line">                                listener-&gt;_claimedTouches.erase(removedIter);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            CCASSERT(<span class="literal">false</span>, <span class="string">"The eventcode is invalid."</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// If the event was stopped, return directly.</span></span><br><span class="line">                <span class="keyword">if</span> (event-&gt;isStopped())</span><br><span class="line">                &#123;</span><br><span class="line">                    updateListeners(event);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                CCASSERT((*touchesIter)-&gt;getID() == (*mutableTouchesIter)-&gt;getID(),</span><br><span class="line">                         <span class="string">"touchesIter ID should be equal to mutableTouchesIter's ID."</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (isClaimed &amp;&amp; listener-&gt;_isRegistered &amp;&amp; listener-&gt;_needSwallow)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isNeedsMutableSet)</span><br><span class="line">                    &#123;</span><br><span class="line">                        mutableTouchesIter = mutableTouches.erase(mutableTouchesIter);</span><br><span class="line">                        isSwallowed = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            dispatchTouchEventToListeners(oneByOneListeners, onTouchEvent);</span><br><span class="line">            <span class="keyword">if</span> (event-&gt;isStopped())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!isSwallowed)</span><br><span class="line">                ++mutableTouchesIter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="我们来分析一下这段代码"><a href="#我们来分析一下这段代码" class="headerlink" title="我们来分析一下这段代码"></a>我们来分析一下这段代码</h3><ul><li>点击屏幕，派发点击事件，调用dispatchTouchEvent</li><li>遍历所有注册是touch事件，获取listener</li><li>通过 <code>EventTouch::EventCode eventCode = event-&gt;getEventCode();</code>获取Touch类型</li><li>如果是<code>EventTouch::EventCode::BEGAN</code>执行onTouchBegan,取得返回值isClaimed(这个值很重要)</li><li><code>if(isClaimed &amp;&amp; listener-&gt;_isRegistered &amp;&amp; listener-&gt;_needSwallow</code>  listener-&gt;_needSwallow是SetSwallowTouches设置的值。同时满足onTouchBegan的返回值为true和listener-&gt;_needSwallow等于true，移除mutableTouchesIter(相当于移除所有的事件监听)，mutableTouchesIter是拷贝而来的不会影响下次的事件相应。</li></ul><h2 id="为什么onTouchBegan返回false，onTouchMove等就不会被执行了呢"><a href="#为什么onTouchBegan返回false，onTouchMove等就不会被执行了呢" class="headerlink" title="为什么onTouchBegan返回false，onTouchMove等就不会被执行了呢"></a>为什么onTouchBegan返回false，onTouchMove等就不会被执行了呢</h2><ul><li>再来看上面的代码，第35行</li><li>需要满足<code>listener-&gt;_claimedTouches.size() &gt; 0</code>才会进入onTouchMove等函数。isClaimed 为true的时候，才会对_claimedTouches添加成员。</li><li>所以onTouchBegan决定了onTouchMove等函数会不会被执行</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cocos-SetSwallowTouches详解&quot;&gt;&lt;a href=&quot;#Cocos-SetSwallowTouches详解&quot; class=&quot;headerlink&quot; title=&quot;Cocos SetSwallowTouches详解&quot;&gt;&lt;/a&gt;Cocos SetSw
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MazeGeneration</title>
    <link href="http://blog.yzqlwt.com/archives/6492a9c4.html"/>
    <id>http://blog.yzqlwt.com/archives/6492a9c4.html</id>
    <published>2019-09-11T02:13:31.000Z</published>
    <updated>2019-12-13T10:24:34.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="迷宫生成"><a href="#迷宫生成" class="headerlink" title="迷宫生成"></a>迷宫生成</h1><p>N*N的网格，按照预设的路线，生成唯一解的迷宫。迷宫可上下左右四个方向移动，每个网格都有颜色，必须按照红-黄-蓝-绿（颜色种类可预设）的顺序走。</p><h3 id="网格节点"><a href="#网格节点" class="headerlink" title="网格节点"></a>网格节点</h3><ul><li><p>节点的颜色(Type)</p></li><li><p>节点的行列名字(Name), “Mesh_2_1”第2行第1列节点</p></li><li><p>是否被访问过(IsVisited)</p></li><li><p>父节点(MeshNode)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MeshNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> MeshNode PreNode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsVisited &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeshNode</span>(<span class="params"><span class="keyword">int</span> type, <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Type = type;</span><br><span class="line">        Name = name;</span><br><span class="line">        PreNode = <span class="literal">null</span>;</span><br><span class="line">        IsVisited = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><ul><li><p>构建一个N*N的迷宫，随机生成每个网格的Type.</p></li><li><p>修改在预设路径上网格节点的Type.</p></li><li><p>从预设路径的开始节点进行深度优先搜索.</p><blockquote><p>1.判断是否到终点，是则跳出</p><p>2.对此节点获取临近节点，筛选临近节点中可以走的节点，没有可以走的就跳出</p><p>3.通过筛选的节点，IsVisited设置为true, preNode设置为步骤2的节点，然后进行dfs，跳出dfs后IsVisited设置为false</p></blockquote></li><li><p>每次搜索到终点时，终点与起点是一条单向链表。将此路径保存起来.</p></li><li><p>所有的路径收集完成后，是一个网格节点的集合。筛选出不在预设路径中的点.</p></li><li><p>修改每个节点的Type.</p></li><li><p>重复进行搜索所有的路径。如果只有一条路径，则跳出。如果还有则继续修改节点Type，重复搜索.</p></li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MeshNode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> MeshNode PreNode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsVisited &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeshNode</span>(<span class="params"><span class="keyword">int</span> type, <span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Type = type;</span><br><span class="line">        Name = name;</span><br><span class="line">        PreNode = <span class="literal">null</span>;</span><br><span class="line">        IsVisited = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">MazeTools</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> MazeSize &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> TypesCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;MeshNode&gt; MazeNodes = <span class="keyword">new</span> List&lt;MeshNode&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MeshNode startMeshNode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> MeshNode endMeshNode &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; AllRouters = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMeshData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> size = MazeSize;</span><br><span class="line">        <span class="keyword">var</span> typesCount = TypesCount;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> node = <span class="keyword">new</span> MeshNode(random.Next(typesCount), <span class="string">"mesh_"</span> + i + <span class="string">"_"</span> + j);</span><br><span class="line">                MazeNodes.Add(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        modifyPresetMesh();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MeshNode&gt; <span class="title">getPresetMeshNodes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span>[] array = &#123; <span class="string">"mesh_1_0"</span>, <span class="string">"mesh_1_1"</span>, <span class="string">"mesh_1_2"</span>, <span class="string">"mesh_1_3"</span>, <span class="string">"mesh_1_4"</span>, <span class="string">"mesh_2_4"</span>, <span class="string">"mesh_3_4"</span>, <span class="string">"mesh_3_3"</span>, <span class="string">"mesh_3_2"</span>, <span class="string">"mesh_3_1"</span>&#125;;</span><br><span class="line">        List&lt;MeshNode&gt; nodes = <span class="keyword">new</span> List&lt;MeshNode&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.Count(); i++)&#123;</span><br><span class="line">            nodes.Add(<span class="keyword">new</span> MeshNode( i%TypesCount,array[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyPresetMesh</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> mazeNodes = MazeNodes;</span><br><span class="line">        <span class="keyword">var</span> presetMeshNode = getPresetMeshNodes();</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> node <span class="keyword">in</span> presetMeshNode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> mazeNode = mazeNodes.Find(<span class="keyword">delegate</span> (MeshNode meshnode)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> node.Name == meshnode.Name;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (mazeNode != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                mazeNode.Type = node.Type;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.WriteLine(<span class="string">"modifyPresetMesh ok！"</span>);</span><br><span class="line">        startMeshNode = presetMeshNode.First();</span><br><span class="line">        endMeshNode = presetMeshNode.Last();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MeshNode <span class="title">getMeshNodeByName</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> MazeNodes.Find(<span class="keyword">delegate</span> (MeshNode meshnode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> meshnode.Name == name;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MeshNode&gt; <span class="title">getNeighbors</span>(<span class="params">MeshNode node</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> name = node.Name;</span><br><span class="line">        <span class="keyword">var</span> arr = name.Split(<span class="string">'_'</span>);</span><br><span class="line">        <span class="keyword">int</span> row = <span class="keyword">int</span>.Parse(arr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> col = <span class="keyword">int</span>.Parse(arr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">var</span> leftNode = getMeshNodeByName(<span class="string">"mesh_"</span> + row + <span class="string">'_'</span> + (col - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> rightNode = getMeshNodeByName(<span class="string">"mesh_"</span> + row + <span class="string">'_'</span> + (col + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">var</span> upNode = getMeshNodeByName(<span class="string">"mesh_"</span> + (row - <span class="number">1</span>) + <span class="string">'_'</span> + col);</span><br><span class="line">        <span class="keyword">var</span> downNode = getMeshNodeByName(<span class="string">"mesh_"</span> + (row + <span class="number">1</span>) + <span class="string">'_'</span> + col);</span><br><span class="line">        <span class="keyword">var</span> nodes = <span class="keyword">new</span> List&lt;MeshNode&gt;();</span><br><span class="line">        nodes.Add(leftNode);</span><br><span class="line">        nodes.Add(rightNode);</span><br><span class="line">        nodes.Add(upNode);</span><br><span class="line">        nodes.Add(downNode);</span><br><span class="line">        nodes = nodes.Where(n =&gt; n != <span class="literal">null</span>).ToList();</span><br><span class="line">        <span class="keyword">return</span> nodes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllRoutes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> node = startMeshNode;</span><br><span class="line">        node.IsVisited = <span class="literal">true</span>;</span><br><span class="line">        dfs(node);</span><br><span class="line">        node.IsVisited = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (AllRouters.Count != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"存在&#123;0&#125;条路径可以到达终点，正在尝试修正！"</span>, AllRouters.Count);</span><br><span class="line">            reviseRoutes();</span><br><span class="line">            resetData();</span><br><span class="line">            getAllRoutes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"done!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        MazeNodes.ForEach(node =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            node.IsVisited = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        AllRouters.Clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reviseRoutes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> routes = AllRouters;</span><br><span class="line">        <span class="keyword">var</span> presetMeshnodes = getPresetMeshNodes();</span><br><span class="line">        <span class="keyword">var</span> array = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">        routes.ForEach(route =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> arr = route.Split(<span class="string">'+'</span>);</span><br><span class="line">            <span class="keyword">var</span> list =</span><br><span class="line">            arr</span><br><span class="line">            .Where(name =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span> == presetMeshnodes.Find(<span class="keyword">delegate</span> (MeshNode n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> n.Name == name;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">            .ToList();</span><br><span class="line">            array.AddRange(list);</span><br><span class="line">        &#125;);</span><br><span class="line">        array</span><br><span class="line">        .Distinct()</span><br><span class="line">        .ToList()</span><br><span class="line">        .ForEach(name =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> node = getMeshNodeByName(name);</span><br><span class="line">            Random random = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">var</span> newType = random.Next(TypesCount);</span><br><span class="line">            <span class="keyword">var</span> oldType = node.Type;</span><br><span class="line">            newType = newType != oldType ? newType : getNextType(node);</span><br><span class="line">            node.Type = newType;</span><br><span class="line">            Console.WriteLine(<span class="string">"修正节点&#123;0&#125;Type: from &#123;1&#125; to &#123;2&#125;"</span>, node.Name, oldType, newType);</span><br><span class="line">        &#125;);</span><br><span class="line">        Console.WriteLine(<span class="string">"修正节点完成，准备进行测试..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextType</span>(<span class="params">MeshNode node</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">var</span> type = node.Type;</span><br><span class="line">        <span class="keyword">return</span> (type + <span class="number">1</span>) % TypesCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPath</span>(<span class="params">MeshNode node</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">string</span> route = node.Name;</span><br><span class="line">        <span class="keyword">while</span> (node.PreNode != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            route = route + <span class="string">'+'</span> + node.PreNode.Name;</span><br><span class="line">            node = node.PreNode;</span><br><span class="line">        &#125;</span><br><span class="line">        AllRouters.Add(route);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span>(<span class="params">MeshNode node</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.Name == endMeshNode.Name)</span><br><span class="line">        &#123;</span><br><span class="line">            addPath(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> nextType = getNextType(node);</span><br><span class="line">        <span class="keyword">var</span> neighbors = getNeighbors(node);</span><br><span class="line">        neighbors</span><br><span class="line">        .Where(neigh =&gt; !neigh.IsVisited)</span><br><span class="line">        .Where(neigh =&gt; neigh.Type == nextType)</span><br><span class="line">        .ToList()</span><br><span class="line">        .ForEach(neigh =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            neigh.IsVisited = <span class="literal">true</span>;</span><br><span class="line">            neigh.PreNode = node;</span><br><span class="line">            dfs(neigh);</span><br><span class="line">            neigh.IsVisited = <span class="literal">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;迷宫生成&quot;&gt;&lt;a href=&quot;#迷宫生成&quot; class=&quot;headerlink&quot; title=&quot;迷宫生成&quot;&gt;&lt;/a&gt;迷宫生成&lt;/h1&gt;&lt;p&gt;N*N的网格，按照预设的路线，生成唯一解的迷宫。迷宫可上下左右四个方向移动，每个网格都有颜色，必须按照红-黄-蓝-绿（颜色种
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.yzqlwt.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C#" scheme="http://blog.yzqlwt.com/tags/C/"/>
    
  </entry>
  
</feed>
